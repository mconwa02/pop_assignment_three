from sudoku import *
import copy

class TestSudoku2018(object):

    def testConvertToSets(self):
        ary = [[0, 1, 2],
               [1, 0, 2],
               [0, 1, 0]]
        ary2 = [[0, -1, -2],
                [-1, 0, -2],
                [0, -1, 0]]
        ary3 = [[0, 8, 0, 0, 0, 0],
                [7, 0, 1, 4, 0, 0],
                [0, 0, 9, 0, 0, 7],
                [0, 0, 2, 0, 0, 9],
                [0, 6, 0, 0, 4, 5],
                [2, 9, 0, 0, 0, 6]]
        ary4 = [[0, 8, 0, 0, 0, 0, 2, 0, 5],
                [7, 0, 1, 4, 0, 0, 0, 8, 9],
                [9, 0, 0, 3, 5, 0, 0, 1, 0],
                [0, 0, 9, 0, 0, 7, 6, 3, 0],
                [0, 0, 2, 0, 0, 9, 7, 0, 0],
                [0, 7, 8, 5, 0, 0, 0, 0, 0],
                [0, 6, 0, 0, 4, 5, 0, 0, 3],
                [2, 9, 0, 0, 0, 6, 5, 0, 1],
                [4, 0, 5, 0, 0, 0, 8, 7, 0]]
        s = set(range(1, 10))
        assert convertToSets(ary) == [[s, {1}, {2}],
                                      [{1}, s, {2}],
                                      [s, {1}, s]]
        assert convertToSets(ary2) == [[s, {-1}, {-2}],
                                       [{-1}, s, {-2}],
                                       [s, {-1}, s]]
        assert convertToSets(ary3) == [[s, {8}, s, s, s, s],
                                       [{7}, s, {1}, {4}, s, s],
                                       [s, s, {9}, s, s, {7}],
                                       [s, s, {2}, s, s, {9}],
                                       [s, {6}, s, s, {4}, {5}],
                                       [{2}, {9}, s, s, s, {6}]]
        assert convertToSets(ary4) == [[s, {8}, s, s, s, s, {2}, s, {5}],
                                       [{7}, s, {1}, {4}, s, s, s, {8}, {9}],
                                       [{9}, s, s, {3}, {5}, s, s, {1}, s],
                                       [s, s, {9}, s, s, {7}, {6}, {3}, s],
                                       [s, s, {2}, s, s, {9}, {7}, s, s],
                                       [s, {7}, {8}, {5}, s, s, s, s, s],
                                       [s, {6}, s, s, {4}, {5}, s, s, {3}],
                                       [{2}, {9}, s, s, s, {6}, {5}, s, {1}],
                                       [{4}, s, {5}, s, s, s, {8}, {7}, s]]
        assert type(ary[0][0]) is set
        assert type(ary2[1][1]) is set
        assert type(ary3[4][1]) is set
        assert type(ary4[7][8]) is set
        assert type(ary[1][2]) is set
        assert type(ary2[2][2]) is set
        assert type(ary3[5][0]) is set
        assert type(ary4[0][8]) is set

    def testConvertToInts(self):
        sets = [[{1, 2}, {3}, {4}],
                [{1}, {3, 5, 7}, {2}],
                [{2, 3}, {2}, {3}]]
        sets2 = [[{-2, -5, -6}, {-1}, {-6}],
                [{-4, -3}, {-5}, {-9, -8}],
                [{-2},{-1,-4} , {-5, -8}]]
        sets3 = [[{2, 8, 9}, {8}, {6, 5, 7}, {2, 4, 7, 8}, {9, 7, 8}, {9}],
                [{7}, {2, 6}, {1}, {4}, {7, 8, 9}, {7, 3, 2}],
                [{6, 8}, {1, 7, 9}, {9}, {2, 5, 4}, {3, 2, 1}, {7}],
                [{1, 2}, {2, 3}, {2}, {5, 7, 8}, {6, 9, 7}, {9}],
                [{1, 7, 9}, {6}, {8, 9}, {3, 2}, {4}, {5}],
                [{2}, {9}, {2, 1, 4}, {8, 7, 4}, {2, 3, 6}, {6}]]
        sets4 = [[{6, 4}, {8}, {5, 4, 3}, {1, 2, 4}, {2, 5, 6}, {4, 8, 9}, {2}, {5, 4, 6}, {5}],
                [{7}, {6, 7, 8}, {1}, {4}, {9, 7, 8}, {2, 3}, {4, 7}, {8}, {9}],
                [{9}, {2, 3, 4}, {3, 5, 7}, {3}, {5}, {5, 8, 9, 10}, {2, 5, 6}, {1}, {5, 6, 7}],
                [{5, 6}, {1, 3}, {9}, {2, 4, 6}, {5, 8, 9}, {7}, {6}, {3}, {3, 7, 8}],
                [{4, 6, 7}, {7, 3, 2}, {2}, {2, 4, 7}, {8, 9, 10}, {9}, {7}, {2, 4, 5}, {9, 4, 3}],
                [{5, 8, 9}, {7}, {8}, {5}, {3, 6, 8}, {1, 3, 4}, {7, 9}, {3, 4, 6}, {4, 7, 8}],
                [{4, 2}, {6}, {5, 8}, {2, 6, 9}, {4}, {5}, {2, 8, 9}, {4, 6, 7}, {3}],
                [{2}, {9}, {6, 8}, {6, 8, 9}, {3, 7, 8}, {6}, {5}, {2, 5, 7}, {1}],
                [{4}, {8, 9, 4}, {5}, {2, 6, 7}, {8, 9, 5}, {2, 5}, {8}, {7}, {5, 4, 2}]]
        assert convertToInts(sets) == [[0, 3, 4],
                                       [1, 0, 2],
                                       [0, 2, 3]]
        assert convertToInts(sets2) == [[0, -1, -6],
                                       [0, -5, 0],
                                       [-2, 0, 0]]
        assert convertToInts(sets3) == [[0, 8, 0, 0, 0, 9],
                                        [7, 0, 1, 4, 0, 0],
                                        [0, 0, 9, 0, 0, 7],
                                        [0, 0, 2, 0, 0, 9],
                                        [0, 6, 0, 0, 4, 5],
                                        [2, 9, 0, 0, 0, 6]]
        assert convertToInts(sets4) == [[0, 8, 0, 0, 0, 0, 2, 0, 5],
                                        [7, 0, 1, 4, 0, 0, 0, 8, 9],
                                        [9, 0, 0, 3, 5, 0, 0, 1, 0],
                                        [0, 0, 9, 0, 0, 7, 6, 3, 0],
                                        [0, 0, 2, 0, 0, 9, 7, 0, 0],
                                        [0, 7, 8, 5, 0, 0, 0, 0, 0],
                                        [0, 6, 0, 0, 4, 5, 0, 0, 3],
                                        [2, 9, 0, 0, 0, 6, 5, 0, 1],
                                        [4, 0, 5, 0, 0, 0, 8, 7, 0]]
        assert type(sets[0][0]) is int
        assert type(sets2[2][0]) is int
        assert type(sets3[2][2]) is int
        assert type(sets4[1][0]) is int
        assert type(sets[1][0]) is int
        assert type(sets2[0][2]) is int
        assert type(sets3[3][2]) is int
        assert type(sets4[8][6]) is int
        

    def testGetRowLocations(self):
        lst = [(5, 0), (5, 1), (5, 2), (5, 3), (5, 4), (5, 5), (5, 6), (5, 7), (5, 8)]
        lst2 = [(3, 0), (3, 1), (3, 2), (3, 3), (3, 4), (3, 5), (3, 6), (3, 7), (3, 8)]
        lst3 = [(8, 0), (8, 1), (8, 2), (8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)]
        assert set(getRowLocations(5)) == set(lst)
        assert set(getRowLocations(3)) == set(lst2)
        assert set(getRowLocations(8)) == set(lst3)

    def testGetColumnLocations(self):
        lst = [(0, 5), (1, 5), (2, 5), (3, 5), (4, 5), (5, 5), (6, 5), (7, 5), (8, 5)]
        lst2 = [(0, 8), (1, 8), (2, 8), (3, 8), (4, 8), (5, 8), (6, 8), (7, 8), (8, 8)]
        lst3 = [(0, 2), (1, 2), (2, 2), (3, 2), (4, 2), (5, 2), (6, 2), (7, 2), (8, 2)]
        assert set(getColumnLocations(5)) == set(lst)
        assert set(getColumnLocations(8)) == set(lst2)
        assert set(getColumnLocations(2)) == set(lst3)

    def testGetBoxLocations(self):
        lst = [(3, 0), (3, 1), (3, 2), (4, 0), (4, 1), (4, 2), (5, 0), (5, 1), (5, 2)]
        lst2 = [(0, 0), (0, 1), (0, 2), (1, 0), (1, 1), (1, 2), (2, 0), (2, 1), (2, 2)]
        lst3 = [(6, 6), (6, 7), (6, 8), (7, 6), (7, 7), (7, 8), (8, 6), (8, 7), (8, 8)]
        lst4 = [(0, 3), (0, 4), (0, 5), (1, 3), (1, 4), (1, 5), (2, 3), (2, 4), (2, 5)]
        assert set(getBoxLocations((3, 2))) == set(lst)
        assert set(getBoxLocations((0, 0))) == set(lst2)
        assert set(getBoxLocations((8, 8))) == set(lst3)
        assert set(getBoxLocations((1, 5))) == set(lst4)

    def testListOfLocations(self):
        location = (1, 2)
        lst = [(1, 3), (2, 1), (6, 2), (1, 6), (7, 2), (1, 5), (2, 2), (1, 1), (3, 2), (0, 0), (8, 2), (1, 4), (4, 2), (1, 0), (0, 1), (2, 0), (1, 8), (1, 7), (5, 2), (0, 2)]
        location2 = (2, 6)
        lst2 = [(6, 6), (5, 6), (2, 8), (2, 1), (0, 7), (1, 6), (2, 5), (7, 6), (3, 6), (2, 2), (8, 6), (2, 3), (0, 8), (2, 7), (4, 6), (2, 0), (0, 6), (1, 8), (1, 7), (2, 4)]
        location3 = (8, 2)
        lst3 =[(8, 0), (6, 2), (8, 5), (7, 2), (1, 2), (8, 1), (2, 2), (8, 6), (3, 2), (7, 1), (6, 0), (8, 7), (4, 2), (8, 3), (7, 0), (6, 1), (8, 8), (5, 2), (0, 2), (8, 4)]
        location4 = (3, 0)
        lst4 =[(8, 0), (5, 1), (3, 7), (4, 0), (3, 3), (3, 6), (5, 0), (3, 4), (4, 1), (3, 2), (0, 0), (6, 0), (4, 2), (1, 0), (3, 5), (7, 0), (3, 1), (3, 8), (2, 0), (5, 2)]
        assert set(listOfLocations((1, 2))) == set(lst)
        assert set(listOfLocations((2, 6))) == set(lst2)
        assert set(listOfLocations((8, 2))) == set(lst3)
        assert set(listOfLocations((3, 0))) == set(lst4)

    def testEliminate(self):
        sets = [[{1, 2}, {3}, {4}],
                [{1}, {3, 5, 7}, {2}],
                [{2, 3}, {2}, {1, 2, 3}]]
        location = (1, 2) # contains {2}
        count = eliminate(sets, location, [(0, 0), (1, 0), (2, 2)])
        sets2 = [[{-2, -1, -6}, {-1}, {-6}],
                [{-4, -3}, {-5}, {-9, -1}],
                [{-2}, {-1,-4}, {-5, -8}]]
        location2 = (0, 1) # contains {-1}
        count2 = eliminate(sets2, location2, [(0, 0), (1, 2), (2, 1)])        
        sets3 = [[{2, 8, 9}, {8}, {6, 5, 7}, {2, 4, 7, 8}, {9, 7, 8}, {9}],
                [{7}, {2, 6}, {1}, {4}, {5, 8, 9}, {7, 3, 2}],
                [{6, 8}, {1, 7, 9}, {9}, {2, 5, 4}, {3, 2, 1}, {7}],
                [{1, 2}, {2, 3}, {2}, {5, 7, 8}, {6, 9, 7}, {9}],
                [{1, 7, 9}, {6}, {8, 9}, {3, 2}, {4}, {5}],
                [{2}, {9}, {5, 1, 4}, {8, 7, 4}, {2, 3, 6}, {6}]]
        location3 = (4, 5) # contains {5}
        count3 = eliminate(sets3, location3, [(0, 2), (1, 4), (2, 3), (3, 3), (4, 3)])          
        sets4 = [[{6, 4}, {8}, {5, 4, 3}, {1, 2, 4}, {2, 5, 6}, {4, 8, 9}, {2}, {5, 4, 6}, {5}],
                [{7}, {6, 7, 8}, {1}, {4}, {9, 7, 8}, {2, 3}, {4, 7}, {8}, {9}],
                [{9}, {2, 3, 4}, {3, 5, 7}, {3}, {5}, {5, 8, 9, 10}, {2, 5, 6}, {1}, {5, 6, 7}],
                [{5, 6}, {1, 3}, {9}, {2, 4, 6}, {5, 8, 9}, {7}, {6}, {3}, {3, 7, 8}],
                [{4, 6, 7}, {7, 3, 2}, {2}, {2, 4, 7}, {8, 9, 10}, {9}, {7}, {2, 4, 5}, {9, 4, 3}],
                [{5, 8, 9}, {7}, {8}, {5}, {3, 6, 8}, {1, 3, 4}, {7, 9}, {3, 4, 6}, {4, 7, 8}],
                [{4, 2}, {6}, {5, 8}, {2, 6, 9}, {4}, {5}, {2, 8, 9}, {4, 6, 7}, {3}],
                [{2}, {9}, {6, 8}, {6, 8, 9}, {3, 7, 8}, {6}, {5}, {2, 5, 7}, {1}],
                [{4}, {8, 9, 4}, {5}, {2, 6, 7}, {8, 9, 5}, {2, 5}, {8}, {7}, {5, 4, 2}]]
        location4 = (7, 0) # contains {2}
        count4 = eliminate(sets4, location4, [(0, 0), (0, 3), (3, 3), (6, 0), (8, 8)])        
        assert count == 2
        assert count2 == 3
        assert count3 == 4
        assert count4 == 4
        assert sets == [[{1}, {3}, {4}], [{1}, {3, 5, 7}, {2}], [{2, 3}, {2}, {1, 3}]]
        assert sets2 == [[{-2, -6}, {-1}, {-6}], [{-4, -3}, {-5}, {-9}], [{-2}, {-4} , {-5, -8}]]
        assert sets3 == [[{2, 8, 9}, {8}, {6, 7}, {2, 4, 7, 8}, {9, 7, 8}, {9}],
                        [{7}, {2, 6}, {1}, {4}, {8, 9}, {7, 3, 2}],
                        [{6, 8}, {1, 7, 9}, {9}, {2, 4}, {3, 2, 1}, {7}],
                        [{1, 2}, {2, 3}, {2}, {7, 8}, {6, 9, 7}, {9}],
                        [{1, 7, 9}, {6}, {8, 9}, {3, 2}, {4}, {5}],
                        [{2}, {9}, {5, 1, 4}, {8, 7, 4}, {2, 3, 6}, {6}]]
        assert sets4 == [[{6, 4}, {8}, {5, 4, 3}, {1, 4}, {2, 5, 6}, {4, 8, 9}, {2}, {5, 4, 6}, {5}],
                        [{7}, {6, 7, 8}, {1}, {4}, {9, 7, 8}, {2, 3}, {4, 7}, {8}, {9}],
                        [{9}, {2, 3, 4}, {3, 5, 7}, {3}, {5}, {5, 8, 9, 10}, {2, 5, 6}, {1}, {5, 6, 7}],
                        [{5, 6}, {1, 3}, {9}, {4, 6}, {5, 8, 9}, {7}, {6}, {3}, {3, 7, 8}],
                        [{4, 6, 7}, {7, 3, 2}, {2}, {2, 4, 7}, {8, 9, 10}, {9}, {7}, {2, 4, 5}, {9, 4, 3}],
                        [{5, 8, 9}, {7}, {8}, {5}, {3, 6, 8}, {1, 3, 4}, {7, 9}, {3, 4, 6}, {4, 7, 8}],
                        [{4}, {6}, {5, 8}, {2, 6, 9}, {4}, {5}, {2, 8, 9}, {4, 6, 7}, {3}],
                        [{2}, {9}, {6, 8}, {6, 8, 9}, {3, 7, 8}, {6}, {5}, {2, 5, 7}, {1}],
                        [{4}, {8, 9, 4}, {5}, {2, 6, 7}, {8, 9, 5}, {2, 5}, {8}, {7}, {5, 4}]]
                        
    def testIsSolved(self):
        # Just check whether every cell has been reduced to one number
        array = [[{1}] * 9] * 9
        assert all([len(array[r][c]) == 1 for r in range(0, 9) for c in range(0, 9)])
        array[3][5] = {1, 2}
        assert not all([len(array[r][c]) == 1 for r in range(0, 9) for c in range(0, 9)])
   
  
    def testSolve(self):
        # Easy
        sudoku1 = [[4, 0, 0,  0, 0, 3,  0, 7, 0],
                   [0, 0, 1,  0, 0, 9,  5, 0, 8],
                   [0, 0, 0,  6, 0, 8,  4, 1, 3],

                   [0, 1, 0,  9, 0, 0,  3, 0, 0],
                   [0, 0, 0,  0, 5, 0,  0, 0, 0],
                   [0, 0, 4,  0, 0, 6,  0, 8, 0],

                   [7, 9, 2,  8, 0, 5,  0, 0, 0],
                   [3, 0, 5,  4, 0, 0,  9, 0, 0],
                   [0, 4, 0,  2, 0, 0,  8, 0, 5]]
                   
        solved1 = [[4, 6, 8,  5, 1, 3,  2, 7, 9], 
                   [2, 3, 1,  7, 4, 9,  5, 6, 8], 
                   [5, 7, 9,  6, 2, 8,  4, 1, 3], 

                   [6, 1, 7,  9, 8, 2,  3, 5, 4], 
                   [8, 2, 3,  1, 5, 4,  7, 9, 6], 
                   [9, 5, 4,  3, 7, 6,  1, 8, 2], 

                   [7, 9, 2,  8, 3, 5,  6, 4, 1], 
                   [3, 8, 5,  4, 6, 1,  9, 2, 7], 
                   [1, 4, 6,  2, 9, 7,  8, 3, 5]]
        # Easy
        sudoku2 = [[0, 0, 0,  7, 0, 0,  6, 8, 9],
                   [3, 0, 8,  0, 0, 0,  2, 0, 0],
                   [0, 0, 0,  8, 1, 0,  0, 4, 0],

                   [6, 0, 0,  0, 0, 0,  8, 0, 4],
                   [8, 0, 0,  3, 4, 9,  0, 0, 5],
                   [7, 0, 5,  0, 0, 0,  0, 0, 3],

                   [0, 8, 0,  0, 7, 6,  0, 0, 0],
                   [0, 0, 7,  0, 0, 0,  1, 0, 8],
                   [9, 5, 1,  0, 0, 8,  0, 0, 0]]
                   
        solved2 = [[1, 2, 4,  7, 5, 3,  6, 8, 9],
                   [3, 7, 8,  9, 6, 4,  2, 5, 1],
                   [5, 9, 6,  8, 1, 2,  3, 4, 7],

                   [6, 3, 9,  5, 2, 7,  8, 1, 4],
                   [8, 1, 2,  3, 4, 9,  7, 6, 5],
                   [7, 4, 5,  6, 8, 1,  9, 2, 3],

                   [4, 8, 3,  1, 7, 6,  5, 9, 2],
                   [2, 6, 7,  4, 9, 5,  1, 3, 8],
                   [9, 5, 1,  2, 3, 8,  4, 7, 6]]

        # Hard
        sudoku3 = [[9, 0, 0,  0, 0, 8,  0, 0, 0],
                   [0, 0, 0,  0, 3, 2,  0, 0, 0],
                   [6, 8, 0,  9, 0, 1,  0, 7, 0],

                   [8, 0, 9,  5, 2, 0,  0, 3, 0],
                   [2, 0, 0,  0, 0, 0,  0, 0, 5],
                   [0, 4, 0,  0, 9, 3,  7, 0, 8],

                   [0, 2, 0,  3, 0, 9,  0, 6, 4],
                   [0, 0, 0,  2, 8, 0,  0, 0, 0],
                   [0, 0, 0,  6, 0, 0,  0, 0, 3]]
                   
        solved3 = [[9, 0, 0,  0, 0, 8,  0, 0, 0],
                   [0, 0, 0,  0, 3, 2,  0, 0, 0],
                   [6, 8, 0,  9, 0, 1,  0, 7, 2],

                   [8, 0, 9,  5, 2, 0,  0, 3, 0],
                   [2, 0, 0,  0, 0, 0,  0, 0, 5],
                   [5, 4, 6,  1, 9, 3,  7, 2, 8],

                   [0, 2, 0,  3, 0, 9,  0, 6, 4],
                   [0, 0, 0,  2, 8, 0,  0, 0, 0],
                   [0, 0, 0,  6, 0, 0,  0, 0, 3]] 

        self.tryToSolve(sudoku1, solved1)
        self.tryToSolve(sudoku2, solved2)
        self.tryToSolve(sudoku3, solved3)

    def tryToSolve(self, problem, solution):
##        print_sudoku(problem)
        problemAsSets = convertToSets(problem)
        solve(problemAsSets)
        solved = convertToInts(problemAsSets)
##        print_sudoku(solution)
        assert solved == solution   

if __name__ == "__main__":
	main()
